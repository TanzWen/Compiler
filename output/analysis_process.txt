stack: 0 $ 
queue: type id ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 1 <Modifier-Closure> 0 $ 
queue: type id ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 1 <Modifier-Closure> 0 $ 
queue: id ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 1 <Modifier-Closure> 0 $ 
queue: id ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 1 <Modifier-Closure> 0 $ 
queue: id ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 16

stack: 16 id 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ( 

stack: 17 <Identifier> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , ( 

stack: 21 <Array-Subscript> 17 <Identifier> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ( 

stack: 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 19

stack: 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 35 <Type> 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 51

stack: 51 id 35 <Type> 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, , 

stack: 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , , 

stack: 73 <Array-Subscript> 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, , 

stack: 50 <Variable> 35 <Type> 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> ·ε , , 

stack: 71 <Initialize> 50 <Variable> 35 <Type> 24 <Modifier-Closure> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, , 

stack: 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 32

stack: 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: * id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 11

stack: 11 * 8 type 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star> -> *·, id 

stack: 13 <Star> 8 type 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 18 <Star-Closure> 13 <Star> 8 type 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> <Star> <Star-Closure>·, id 

stack: 14 <Star-Closure> 8 type 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 51

stack: 51 id 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, [ 

stack: 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: [ digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 72

stack: 72 [ 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 28

stack: 28 digit 72 [ 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ] 

stack: 29 <Number> 72 [ 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ] 

stack: 107 <Factors> 72 [ 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 146

stack: 146 ] 107 <Factors> 72 [ 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> [ <Factors> ]·, ) 

stack: 73 <Array-Subscript> 52 <Identifier> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ) 

stack: 50 <Variable> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> ·ε , , 

stack: 71 <Initialize> 50 <Variable> 35 <Type> 24 <Modifier-Closure> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, ) 

stack: 48 <Declaration> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Closure> -> ·ε , ) 

stack: 64 <Declaration-Closure> 48 <Declaration> 32 , 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Closure> -> , <Declaration> <Declaration-Closure>·, ) 

stack: 33 <Declaration-Closure> 22 <Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-Declaration> -> <Declaration> <Declaration-Closure>·, ) 

stack: 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 34

stack: 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: { static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 49

stack: 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: static type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 4

stack: 4 static 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <describe> -> static·, type 

stack: 6 <describe> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier> -> <describe>·, type 

stack: 5 <Modifier> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 10 <Modifier-Closure> 5 <Modifier> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> <Modifier> <Modifier-Closure>·, type 

stack: 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 132

stack: 132 id 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, = 

stack: 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 186 <Array-Subscript> 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, = 

stack: 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 183

stack: 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 176

stack: 176 digit 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ; 

stack: 174 <Number> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ; 

stack: 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ; 

stack: 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ; 

stack: 230 <Term> 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ; 

stack: 177 <Expression> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Rvalue> -> <Expression>·, ; 

stack: 235 <Rvalue> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> = <Rvalue>·, ; 

stack: 184 <Initialize> 131 <Variable> 95 <Type> 69 <Modifier-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, ; 

stack: 68 <Declaration> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 94

stack: 94 ; 68 <Declaration> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement> -> <Declaration> ;·, const 

stack: 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: const type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 7

stack: 7 const 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <describe> -> const·, type 

stack: 6 <describe> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier> -> <describe>·, type 

stack: 5 <Modifier> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 10 <Modifier-Closure> 5 <Modifier> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> <Modifier> <Modifier-Closure>·, type 

stack: 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 132

stack: 132 id 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, = 

stack: 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 186 <Array-Subscript> 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, = 

stack: 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 183

stack: 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 176

stack: 176 digit 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ; 

stack: 174 <Number> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ; 

stack: 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ; 

stack: 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ; 

stack: 230 <Term> 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ; 

stack: 177 <Expression> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Rvalue> -> <Expression>·, ; 

stack: 235 <Rvalue> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> = <Rvalue>·, ; 

stack: 184 <Initialize> 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, ; 

stack: 68 <Declaration> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 94

stack: 94 ; 68 <Declaration> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement> -> <Declaration> ;·, const 

stack: 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: const type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 7

stack: 7 const 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <describe> -> const·, type 

stack: 6 <describe> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier> -> <describe>·, type 

stack: 5 <Modifier> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 10 <Modifier-Closure> 5 <Modifier> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> <Modifier> <Modifier-Closure>·, type 

stack: 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 132

stack: 132 id 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, = 

stack: 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 186 <Array-Subscript> 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, = 

stack: 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 183

stack: 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 176

stack: 176 digit 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ; 

stack: 174 <Number> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ; 

stack: 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ; 

stack: 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ; 

stack: 230 <Term> 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ; 

stack: 177 <Expression> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Rvalue> -> <Expression>·, ; 

stack: 235 <Rvalue> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> = <Rvalue>·, ; 

stack: 184 <Initialize> 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, ; 

stack: 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 94

stack: 94 ; 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement> -> <Declaration> ;·, type 

stack: 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 132

stack: 132 id 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, = 

stack: 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 186 <Array-Subscript> 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, = 

stack: 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 183

stack: 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 172

stack: 172 id 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, + 

stack: 173 <Identifier> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , ; 

stack: 225 <Array-Subscript> 173 <Identifier> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, + 

stack: 175 <Variable> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Variable>·, + 

stack: 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, + 

stack: 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 231

stack: 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 172

stack: 172 id 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ; 

stack: 173 <Identifier> 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , ; 

stack: 225 <Array-Subscript> 173 <Identifier> 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ; 

stack: 175 <Variable> 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Variable>·, ; 

stack: 182 <Factors> 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ; 

stack: 262 <Factor> 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ; 

stack: 283 <Term> 262 <Factor> 231 + 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> + <Factor> <Term>·, ; 

stack: 230 <Term> 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ; 

stack: 177 <Expression> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Rvalue> -> <Expression>·, ; 

stack: 235 <Rvalue> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> = <Rvalue>·, ; 

stack: 184 <Initialize> 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, ; 

stack: 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 94

stack: 94 ; 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement> -> <Declaration> ;·, type 

stack: 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 132

stack: 132 id 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, [ 

stack: 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 185

stack: 185 [ 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 28

stack: 28 digit 185 [ 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ] 

stack: 29 <Number> 185 [ 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ] 

stack: 236 <Factors> 185 [ 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 265

stack: 265 ] 236 <Factors> 185 [ 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> [ <Factors> ]·, = 

stack: 186 <Array-Subscript> 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, = 

stack: 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 183

stack: 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 180

stack: 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, , 

stack: 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: , digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 190

stack: 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 137

stack: 137 digit 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, } 

stack: 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> ·ε , } 

stack: 266 <Number-Closure> 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 266 <Number-Closure> 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 266 <Number-Closure> 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 266 <Number-Closure> 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 266 <Number-Closure> 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 266 <Number-Closure> 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 266 <Number-Closure> 238 <Number> 190 , 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 266 <Number-Closure> 238 <Number> 190 , 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 266 <Number-Closure> 238 <Number> 190 , 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number-Closure> -> , <Number> <Number-Closure>·, } 

stack: 191 <Number-Closure> 139 <Number> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Multiple-Data> -> <Number> <Number-Closure>·, } 

stack: 228 <Multiple-Data> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 260

stack: 260 } 228 <Multiple-Data> 180 { 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Rvalue> -> { <Multiple-Data> }·, ; 

stack: 235 <Rvalue> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> = <Rvalue>·, ; 

stack: 184 <Initialize> 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, ; 

stack: 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 94

stack: 94 ; 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement> -> <Declaration> ;·, type 

stack: 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 132

stack: 132 id 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ; 

stack: 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 186 <Array-Subscript> 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ; 

stack: 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> ·ε , ; 

stack: 184 <Initialize> 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, ; 

stack: 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 94

stack: 94 ; 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement> -> <Declaration> ;·, type 

stack: 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Modifier-Closure> -> ·ε , type 

stack: 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: type id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 8

stack: 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Star-Closure> -> ·ε , id 

stack: 14 <Star-Closure> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Pointer> -> <Star-Closure>·, id 

stack: 12 <Pointer> 8 type 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Type> -> type <Pointer>·, id 

stack: 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 132

stack: 132 id 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, = 

stack: 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 186 <Array-Subscript> 133 <Identifier> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, = 

stack: 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 183

stack: 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 176

stack: 176 digit 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ; 

stack: 174 <Number> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ; 

stack: 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ; 

stack: 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ; 

stack: 230 <Term> 181 <Factor> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ; 

stack: 177 <Expression> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Rvalue> -> <Expression>·, ; 

stack: 235 <Rvalue> 183 = 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Initialize> -> = <Rvalue>·, ; 

stack: 184 <Initialize> 131 <Variable> 95 <Type> 69 <Modifier-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration> -> <Modifier-Closure> <Type> <Variable> <Initialize>·, ; 

stack: 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 94

stack: 94 ; 68 <Declaration> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement> -> <Declaration> ;·, if 

stack: 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> ·ε , } 

stack: 93 <Declaration-Statement-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> <Declaration-Statement> <Declaration-Statement-Closure>·, if 

stack: 93 <Declaration-Statement-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> <Declaration-Statement> <Declaration-Statement-Closure>·, if 

stack: 93 <Declaration-Statement-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> <Declaration-Statement> <Declaration-Statement-Closure>·, if 

stack: 93 <Declaration-Statement-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> <Declaration-Statement> <Declaration-Statement-Closure>·, if 

stack: 93 <Declaration-Statement-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> <Declaration-Statement> <Declaration-Statement-Closure>·, if 

stack: 93 <Declaration-Statement-Closure> 67 <Declaration-Statement> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> <Declaration-Statement> <Declaration-Statement-Closure>·, if 

stack: 93 <Declaration-Statement-Closure> 67 <Declaration-Statement> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> <Declaration-Statement> <Declaration-Statement-Closure>·, if 

stack: 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: if ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 87

stack: 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 124

stack: 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 154

stack: 154 id 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, + 

stack: 155 <Identifier> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , >= 

stack: 205 <Array-Subscript> 155 <Identifier> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, + 

stack: 161 <Variable> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Variable>·, + 

stack: 163 <Factors> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , >= 

stack: 219 <Factor-Recursive> 163 <Factors> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, + 

stack: 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 217

stack: 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 154

stack: 154 id 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, > 

stack: 155 <Identifier> 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , >= 

stack: 205 <Array-Subscript> 155 <Identifier> 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, > 

stack: 161 <Variable> 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Variable>·, > 

stack: 163 <Factors> 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , >= 

stack: 219 <Factor-Recursive> 163 <Factors> 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, > 

stack: 253 <Factor> 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , >= 

stack: 277 <Term> 253 <Factor> 217 + 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> + <Factor> <Term>·, > 

stack: 216 <Term> 162 <Factor> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, > 

stack: 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: > digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 210

stack: 210 > 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Logical-Operator> -> >·, digit 

stack: 207 <Logical-Operator> 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 40

stack: 40 digit 207 <Logical-Operator> 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ) 

stack: 39 <Number> 207 <Logical-Operator> 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ) 

stack: 43 <Factors> 207 <Logical-Operator> 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , - 

stack: 61 <Factor-Recursive> 43 <Factors> 207 <Logical-Operator> 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ) 

stack: 38 <Factor> 207 <Logical-Operator> 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ) 

stack: 56 <Term> 38 <Factor> 207 <Logical-Operator> 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ) 

stack: 249 <Expression> 207 <Logical-Operator> 157 <Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Logical-Expression> -> <Expression> <Logical-Operator> <Expression>·, ) 

stack: 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 214

stack: 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: { id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 251

stack: 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> ·ε , } 

stack: 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 82

stack: 82 id 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ( 

stack: 83 <Identifier> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 121 <Array-Subscript> 83 <Identifier> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ( 

stack: 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 128

stack: 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: string ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 164

stack: 164 string 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <String> -> string·, ) 

stack: 171 <String> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter> -> <String>·, ) 

stack: 166 <Parameter> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-Closure> -> ·ε , ) 

stack: 222 <Parameter-Closure> 166 <Parameter> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-List> -> <Parameter> <Parameter-Closure>·, ) 

stack: 169 <Parameter-List> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 223

stack: 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 257

stack: 257 ; 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-or-Function-Call> -> ( <Parameter-List> ) ;·, } 

stack: 129 <Assignment-or-Function-Call> 91 <Variable> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-Function> -> <Variable> <Assignment-or-Function-Call>·, } 

stack: 85 <Assignment-Function> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block-Closure> -> ·ε , } 

stack: 123 <Function-Block-Closure> 85 <Assignment-Function> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block-Closure> -> <Assignment-Function> <Function-Block-Closure>·, } 

stack: 86 <Function-Block-Closure> 65 <Declaration-Statement-Closure> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block> -> <Declaration-Statement-Closure> <Function-Block-Closure>·, } 

stack: 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 292

stack: 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: else { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 295

stack: 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: { id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 299

stack: 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> ·ε , } 

stack: 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 82

stack: 82 id 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ( 

stack: 83 <Identifier> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 121 <Array-Subscript> 83 <Identifier> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ( 

stack: 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 128

stack: 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: string ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 164

stack: 164 string 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <String> -> string·, ) 

stack: 171 <String> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter> -> <String>·, ) 

stack: 166 <Parameter> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-Closure> -> ·ε , ) 

stack: 222 <Parameter-Closure> 166 <Parameter> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-List> -> <Parameter> <Parameter-Closure>·, ) 

stack: 169 <Parameter-List> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 223

stack: 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 257

stack: 257 ; 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-or-Function-Call> -> ( <Parameter-List> ) ;·, } 

stack: 129 <Assignment-or-Function-Call> 91 <Variable> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-Function> -> <Variable> <Assignment-or-Function-Call>·, } 

stack: 85 <Assignment-Function> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block-Closure> -> ·ε , } 

stack: 123 <Function-Block-Closure> 85 <Assignment-Function> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block-Closure> -> <Assignment-Function> <Function-Block-Closure>·, } 

stack: 86 <Function-Block-Closure> 65 <Declaration-Statement-Closure> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block> -> <Declaration-Statement-Closure> <Function-Block-Closure>·, } 

stack: 301 <Function-Block> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 302

stack: 302 } 301 <Function-Block> 299 { 295 else 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Else-Statement> -> else { <Function-Block> }·, for 

stack: 296 <Else-Statement> 292 } 275 <Function-Block> 251 { 214 ) 160 <Logical-Expression> 124 ( 87 if 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Conditional-Statement> -> if ( <Logical-Expression> ) { <Function-Block> } <Else-Statement>·, for 

stack: 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: for ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 84

stack: 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 122

stack: 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 82

stack: 82 id 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, = 

stack: 83 <Identifier> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 121 <Array-Subscript> 83 <Identifier> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, = 

stack: 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 203

stack: 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 176

stack: 176 digit 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ; 

stack: 174 <Number> 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ; 

stack: 182 <Factors> 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ; 

stack: 181 <Factor> 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ; 

stack: 230 <Term> 181 <Factor> 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ; 

stack: 177 <Expression> 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Rvalue> -> <Expression>·, ; 

stack: 247 <Rvalue> 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 273

stack: 273 ; 247 <Rvalue> 203 = 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-or-Function-Call> -> = <Rvalue> ;·, id 

stack: 202 <Assignment-or-Function-Call> 153 <Variable> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-Function> -> <Variable> <Assignment-or-Function-Call>·, id 

stack: 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 154

stack: 154 id 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, < 

stack: 155 <Identifier> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , >= 

stack: 205 <Array-Subscript> 155 <Identifier> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, < 

stack: 161 <Variable> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Variable>·, < 

stack: 163 <Factors> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , >= 

stack: 219 <Factor-Recursive> 163 <Factors> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, < 

stack: 162 <Factor> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , >= 

stack: 216 <Term> 162 <Factor> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, < 

stack: 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: < digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 212

stack: 212 < 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Logical-Operator> -> <·, digit 

stack: 244 <Logical-Operator> 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 176

stack: 176 digit 244 <Logical-Operator> 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Number> -> digit·, ; 

stack: 174 <Number> 244 <Logical-Operator> 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Number>·, ; 

stack: 182 <Factors> 244 <Logical-Operator> 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 244 <Logical-Operator> 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ; 

stack: 181 <Factor> 244 <Logical-Operator> 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ; 

stack: 230 <Term> 181 <Factor> 244 <Logical-Operator> 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ; 

stack: 267 <Expression> 244 <Logical-Operator> 199 <Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Logical-Expression> -> <Expression> <Logical-Operator> <Expression>·, ; 

stack: 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 245

stack: 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 268

stack: 268 id 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ++ 

stack: 269 <Identifier> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , ++ 

stack: 287 <Array-Subscript> 269 <Identifier> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ++ 

stack: 271 <Variable> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ++ ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 289

stack: 289 ++ 271 <Variable> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Suffix-Operator> -> ++·, ) 

stack: 290 <Suffix-Operator> 271 <Variable> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Suffix-Expression> -> <Variable> <Suffix-Operator>·, ) 

stack: 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 288

stack: 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: { id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 294

stack: 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Declaration-Statement-Closure> -> ·ε , } 

stack: 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 82

stack: 82 id 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, = 

stack: 83 <Identifier> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 121 <Array-Subscript> 83 <Identifier> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, = 

stack: 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: = id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 130

stack: 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 172

stack: 172 id 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, + 

stack: 173 <Identifier> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , ; 

stack: 225 <Array-Subscript> 173 <Identifier> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, + 

stack: 175 <Variable> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Variable>·, + 

stack: 182 <Factors> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, + 

stack: 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: + id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 231

stack: 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 172

stack: 172 id 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, [ 

stack: 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: [ id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 224

stack: 224 [ 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 30

stack: 30 id 224 [ 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ] 

stack: 31 <Identifier> 224 [ 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , ] 

stack: 47 <Array-Subscript> 31 <Identifier> 224 [ 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ] 

stack: 27 <Variable> 224 [ 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Variable>·, ] 

stack: 258 <Factors> 224 [ 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ] ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 281

stack: 281 ] 258 <Factors> 224 [ 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> [ <Factors> ]·, ; 

stack: 225 <Array-Subscript> 173 <Identifier> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ; 

stack: 175 <Variable> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factors> -> <Variable>·, ; 

stack: 182 <Factors> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor-Recursive> -> ·ε , ; 

stack: 233 <Factor-Recursive> 182 <Factors> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Factor> -> <Factors> <Factor-Recursive>·, ; 

stack: 262 <Factor> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> ·ε , ; 

stack: 283 <Term> 262 <Factor> 231 + 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Term> -> + <Factor> <Term>·, ; 

stack: 230 <Term> 181 <Factor> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Expression> -> <Factor> <Term>·, ; 

stack: 177 <Expression> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Rvalue> -> <Expression>·, ; 

stack: 179 <Rvalue> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 227

stack: 227 ; 179 <Rvalue> 130 = 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-or-Function-Call> -> = <Rvalue> ;·, } 

stack: 129 <Assignment-or-Function-Call> 91 <Variable> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-Function> -> <Variable> <Assignment-or-Function-Call>·, } 

stack: 85 <Assignment-Function> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block-Closure> -> ·ε , } 

stack: 123 <Function-Block-Closure> 85 <Assignment-Function> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block-Closure> -> <Assignment-Function> <Function-Block-Closure>·, } 

stack: 86 <Function-Block-Closure> 65 <Declaration-Statement-Closure> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Function-Block> -> <Declaration-Statement-Closure> <Function-Block-Closure>·, } 

stack: 298 <Function-Block> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 300

stack: 300 } 298 <Function-Block> 294 { 288 ) 270 <Suffix-Expression> 245 ; 200 <Logical-Expression> 152 <Assignment-Function> 122 ( 84 for 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <For-Loop> -> for ( <Assignment-Function> <Logical-Expression> ; <Suffix-Expression> ) { <Function-Block> }·, id 

stack: 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 82

stack: 82 id 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ( 

stack: 83 <Identifier> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 121 <Array-Subscript> 83 <Identifier> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ( 

stack: 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 128

stack: 128 ( 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 168

stack: 168 id 128 ( 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ) 

stack: 167 <Identifier> 128 ( 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter> -> <Identifier>·, ) 

stack: 166 <Parameter> 128 ( 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-Closure> -> ·ε , ) 

stack: 222 <Parameter-Closure> 166 <Parameter> 128 ( 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-List> -> <Parameter> <Parameter-Closure>·, ) 

stack: 169 <Parameter-List> 128 ( 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 223

stack: 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 257

stack: 257 ; 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-or-Function-Call> -> ( <Parameter-List> ) ;·, id 

stack: 129 <Assignment-or-Function-Call> 91 <Variable> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-Function> -> <Variable> <Assignment-or-Function-Call>·, id 

stack: 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 82

stack: 82 id 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ( 

stack: 83 <Identifier> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 121 <Array-Subscript> 83 <Identifier> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ( 

stack: 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( id ) ; id ( string ) ; return digit ; } $ 
action: shift : 128

stack: 128 ( 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ) ; id ( string ) ; return digit ; } $ 
action: shift : 168

stack: 168 id 128 ( 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ) 

stack: 167 <Identifier> 128 ( 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter> -> <Identifier>·, ) 

stack: 166 <Parameter> 128 ( 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-Closure> -> ·ε , ) 

stack: 222 <Parameter-Closure> 166 <Parameter> 128 ( 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( string ) ; return digit ; } $ 
action: reduce : <Parameter-List> -> <Parameter> <Parameter-Closure>·, ) 

stack: 169 <Parameter-List> 128 ( 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; id ( string ) ; return digit ; } $ 
action: shift : 223

stack: 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; id ( string ) ; return digit ; } $ 
action: shift : 257

stack: 257 ; 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-or-Function-Call> -> ( <Parameter-List> ) ;·, id 

stack: 129 <Assignment-or-Function-Call> 91 <Variable> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( string ) ; return digit ; } $ 
action: reduce : <Assignment-Function> -> <Variable> <Assignment-or-Function-Call>·, id 

stack: 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: id ( string ) ; return digit ; } $ 
action: shift : 82

stack: 82 id 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; return digit ; } $ 
action: reduce : <Identifier> -> id·, ( 

stack: 83 <Identifier> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; return digit ; } $ 
action: reduce : <Array-Subscript> -> ·ε , = 

stack: 121 <Array-Subscript> 83 <Identifier> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; return digit ; } $ 
action: reduce : <Variable> -> <Identifier> <Array-Subscript>·, ( 

stack: 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ( string ) ; return digit ; } $ 
action: shift : 128

stack: 128 ( 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: string ) ; return digit ; } $ 
action: shift : 164

stack: 164 string 128 ( 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; return digit ; } $ 
action: reduce : <String> -> string·, ) 

stack: 171 <String> 128 ( 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; return digit ; } $ 
action: reduce : <Parameter> -> <String>·, ) 

stack: 166 <Parameter> 128 ( 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; return digit ; } $ 
action: reduce : <Parameter-Closure> -> ·ε , ) 

stack: 222 <Parameter-Closure> 166 <Parameter> 128 ( 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; return digit ; } $ 
action: reduce : <Parameter-List> -> <Parameter> <Parameter-Closure>·, ) 

stack: 169 <Parameter-List> 128 ( 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ) ; return digit ; } $ 
action: shift : 223

stack: 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; return digit ; } $ 
action: shift : 257

stack: 257 ; 223 ) 169 <Parameter-List> 128 ( 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: return digit ; } $ 
action: reduce : <Assignment-or-Function-Call> -> ( <Parameter-List> ) ;·, return 

stack: 129 <Assignment-or-Function-Call> 91 <Variable> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: return digit ; } $ 
action: reduce : <Assignment-Function> -> <Variable> <Assignment-or-Function-Call>·, return 

stack: 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: return digit ; } $ 
action: shift : 81

stack: 81 return 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: digit ; } $ 
action: shift : 116

stack: 116 digit 81 return 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } $ 
action: reduce : <Number> -> digit·, ; 

stack: 117 <Number> 81 return 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } $ 
action: reduce : <Factors> -> <Number>·, ; 

stack: 114 <Factors> 81 return 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: ; } $ 
action: shift : 148

stack: 148 ; 114 <Factors> 81 return 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Return> -> return <Factors> ;·, } 

stack: 89 <Function-Return> 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Block-Closure> -> ·ε , } 

stack: 126 <Function-Block-Closure> 89 <Function-Return> 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Block-Closure> -> <Function-Return> <Function-Block-Closure>·, } 

stack: 123 <Function-Block-Closure> 85 <Assignment-Function> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Block-Closure> -> <Assignment-Function> <Function-Block-Closure>·, } 

stack: 123 <Function-Block-Closure> 85 <Assignment-Function> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Block-Closure> -> <Assignment-Function> <Function-Block-Closure>·, } 

stack: 123 <Function-Block-Closure> 85 <Assignment-Function> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Block-Closure> -> <Assignment-Function> <Function-Block-Closure>·, } 

stack: 127 <Function-Block-Closure> 90 <For-Loop> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Block-Closure> -> <For-Loop> <Function-Block-Closure>·, } 

stack: 125 <Function-Block-Closure> 88 <Conditional-Statement> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Block-Closure> -> <Conditional-Statement> <Function-Block-Closure>·, } 

stack: 86 <Function-Block-Closure> 65 <Declaration-Statement-Closure> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: reduce : <Function-Block> -> <Declaration-Statement-Closure> <Function-Block-Closure>·, } 

stack: 66 <Function-Block> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: } $ 
action: shift : 92

stack: 92 } 66 <Function-Block> 49 { 34 ) 23 <Parameter-Declaration> 19 ( 15 <Variable> 9 <Type> 1 <Modifier-Closure> 0 $ 
queue: $ 
action: reduce : <Function-Definition> -> <Modifier-Closure> <Type> <Variable> ( <Parameter-Declaration> ) { <Function-Block> }·, $ 

stack: 2 <Function-Definition> 0 $ 
queue: $ 
action: acc : acc

